from django.core.management.base import BaseCommand
from telegram import Bot, ParseMode
from telegram import InlineQueryResultCachedPhoto
from telegram.ext import Filters, MessageHandler, Updater, CommandHandler, CallbackQueryHandler, InlineQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.utils.request import Request
from telegram.error import BadRequest, Unauthorized

from django.conf import settings
from django.db.models import F
from django.db import IntegrityError
from django.utils import timezone
from django.core.files import File

from memeapp.models import Profile, Meme, LogReaction, Invite, Template, LogInline
from memeapp.recommend_engine.recommend_engine import RecommendEngine
from memeapp.recommend_engine.recommend_client import get_next_meme, submit_reaction, process_new_meme, reaction_to_rating, approved_processing
from memeapp.recommend_engine.daily_recalculation import daily_recalculation
from memeapp.choices import APPROVED, REJECTED, ON_REVIEW, MEME_OF_THE_DAY
from memeapp.getters import get_oldest_on_review, get_on_review_count, get_origin_on_review_count, get_users_count, get_memes_count, get_total_views, get_total_likes, get_user_views, get_user_likes, get_uploaded_count, get_uploaded_likes, get_uploaded_views, get_uploaded_max_liked, get_all_users, get_meme_of_the_day, has_user_seen_meme, does_nickname_exist, get_origin_nth_meme, get_n_uploads_a_day, get_origin_range_memes_stats
from memeapp.setters import set_moderation_result
from memeapp.origin_manager import get_id_by_origin, is_meme_from_user, get_user_origin
from memeapp.management.commands.bot_utils import get_right_time_word, get_time_ago_words

import logging
import sys
import os
import json
import datetime
import Levenshtein
import traceback
import time
import html
import uuid
import schedule
import re
from threading import Thread
from time import sleep
import math
import numpy as np


logger = logging.getLogger("memerecommend")


class Command(BaseCommand):
    # intro_message = 'This is the meme recommendation bot. Welcome!'
    # start_text = 'Lets go!'
    # continue_text = 'Back  to memes'
    # good_reaction_emoji = "üòÄ"
    # bad_reaction_emoji = "üòü"
    # no_memes_left_message = "You deserve a break. Please come back in a few hours"
    # imback_text = "I'm back"
    # successful_upload_message = "Your meme is uploaded, you can always check how it's doing with '/meme {}' command"
    # unknown_error_message = "Strange things happened. Please try to restart bot with /start command. Don't worry, your data will NOT be lost"
    # wide_image_message = "Your image is too wide, image proportion must be between 1:{} and {}:1".format(settings.MAX_HEIGHT_PROPORTION, settings.MAX_WIDTH_PROPORTION)
    # high_image_message = "Your image is too high, image proportion must be between 1:{} and {}:1".format(settings.MAX_HEIGHT_PROPORTION, settings.MAX_WIDTH_PROPORTION)
    # large_image_message = "Your image is too large, image size must be less then {} MB".format(settings.MAX_IMAGE_SIZE / 1024 / 1024)
    # upload_message = "Attach a meme you want to upload as a single image (not file)"
    # forwarded_photo_message = "If you are attempting to upload a meme please send it as a single photo, not as a forwarded message"
    # document_message = "If you are attempting to upload a meme please attach a photo, not a document, video or audio"
    # photo_with_caption_message = "If you are attempting to upload a meme please send it as a photo without caption"
    # meme_help_message = "You should use this command like this '/meme 2020'"
    # on_review_message = "This meme is on review"
    # rejected_message = "This meme was rejected"
    # approved_message = "This meme is live.\n Views: {}\n Likes: {}"
    # meme_does_not_exist_message = "No memes with that number found"
    intro_message = '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ–º–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –¢–æ, –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –º–µ–º—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ú–µ–º–µ –î–Ω—è –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
    first_time_message = intro_message + "\n\n" + "–í –Ω–∞—á–∞–ª–µ –º—ã –ø–æ–∫–∞–∂–µ–º –í–∞–º –æ–∫–æ–ª–æ 20-30 –º–µ–º–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞ (–í—ã –Ω–µ –∑–∞–º–µ—Ç–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ–ª–µ—Ç–∏—Ç –≤—Ä–µ–º—è), —á—Ç–æ–±—ã –ø–æ–ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –í–∞—à–∏ –≤–∫—É—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
    start_text = '–ü–æ–µ—Ö–∞–ª–∏!'
    continue_text = '–°–Ω–æ–≤–∞ –∫ –º–µ–º–∞–º'
    good_reaction_emoji = "üëç"
    bad_reaction_emoji = "üí©"
    good_moderation_emoji = "‚úÖ"
    bad_moderation_emoji = "‚õîÔ∏è"
    on_review_emoji = "üïî"
    views_emoji = "üëÅ"
    next_page_emoji = "‚ñ∂Ô∏è"
    previous_page_emoji = "‚óÄÔ∏è"
    no_memes_left_message = "–í—ã —Ç–æ—á–Ω–æ –∑–∞—Å–ª—É–∂–∏–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–∏–∫–æ–≤"
    imback_text = "–Ø –≤–µ—Ä–Ω—É–ª—Å—è"
    successful_upload_message = "–í–∞—à –º–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –æ–Ω –ø–æ–∂–∏–≤–∞–µ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /m{}"
    unknown_error_message = "–ß—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start . –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã –ù–ï –±—É–¥—É—Ç"
    wide_image_message = "–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ–µ, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–∂–¥—É 1:{} –∏ {}:1".format(settings.MAX_HEIGHT_PROPORTION, settings.MAX_WIDTH_PROPORTION)
    high_image_message = "–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≤ –≤—ã—Å–æ—Ç—É, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–∂–¥—É 1:{} –∏ {}:1".format(settings.MAX_HEIGHT_PROPORTION, settings.MAX_WIDTH_PROPORTION)
    large_image_message = "–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–æ–µ, –≤–µ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ {} MB".format(settings.MAX_IMAGE_SIZE / 1024 / 1024)
    origin_meme_repeated_message = "–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —ç—Ç–æ—Ç –º–µ–º, –≤–æ—Ç –æ–Ω /m{}. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ @memebrandt_support"
    upload_message = "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤ –∫–∞—á–µ—Å—Ç–≤–µ '—Ñ–æ—Ç–æ' –≤ –æ–¥–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ (–ù–ï '—Ñ–∞–π–ª'). –í–∞—à–∏ —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§. –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ"
    forwarded_photo_message = "–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ, –∞ –Ω–µ –∫–∞–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    document_message = "–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ"
    photo_with_caption_message = "–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –±–µ–∑ –∫–∞–ø—á–∏"
    on_review_author_message = "–í–∞—à –º–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    on_review_other_message = "–≠—Ç–æ—Ç –º–µ–º –ø–æ–∫–∞ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º—ã –í–∞–º –µ–≥–æ –Ω–µ –ø–æ–∫–∞–∂–µ–º"
    rejected_author_message = "–í–∞—à –º–µ–º –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω"
    rejected_other_message = "–≠—Ç–æ—Ç –º–µ–º –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ—ç—Ç–æ–º—É –º—ã –í–∞–º –µ–≥–æ –Ω–µ –ø–æ–∫–∞–∂–µ–º"
    approved_message = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {} \nüëÅ {}\nüëç {}"
    meme_does_not_exist_message = "–ù–µ—Ç –º–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º"
    permission_denied_message = "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
    no_memes_for_review_message = "–ù–µ—Ç –º–µ–º–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    too_many_rejected_message = "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–µ–º—ã, —Ç–∞–∫ –∫–∞–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –í–∞—à–∏—Ö –º–µ–º–æ–≤ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ @memebrandt_support"
    too_many_onreview_message = "–î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞, —á–∏—Å–ª–æ –º–µ–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ–º—ã"
    help_message = "–≠—Ç–æ –±–æ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–º—ã, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –º–µ–º—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –º—ã –µ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–∫–∞–∂–µ–º. \n\n–¢–∞–∫–∂–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –º–Ω–æ–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ú–µ–º –î–Ω—è —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –î–æ–±–∞–≤–ª—è—è —Å–≤–æ–π –º–µ–º, –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤ –Ω–µ–º —É—á–∞—Å—Ç–∏–µ, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–∫–∞–∂–µ–º –≤ —Å–ª—É—á–∞–µ –í–∞—à–µ–π –ø–æ–±–µ–¥—ã. \n\n –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n /upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –º–µ–º. –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –≤—Å–µ –º–µ–º—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ \n /changename - —Å–¥–µ–ª–∞—Ç—å –≤–ø–µ—Ä–≤—ã–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ) \n /gallery - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–π–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞–∂–¥–æ–≥–æ –í–∞—à–µ–≥–æ –º–µ–º–∞ \n /feed - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç \n /stats - –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ –±–æ—Ç–∞, —Ç–∞–∫ –∏ –í–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é"
    meme_of_the_day_congrats = "–ê –≤–æ—Ç –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π #–º–µ–º–¥–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–æ—Å—Ç–∏–≤—à–µ–≥–æ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {}! \n\nüëÅ {}\nüëç {} \n–í—Å–µ–≥–æ –º–µ–º–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n======\n" \
                               "–ù–∞—à–∞ –∫—É—Ä—Å–æ–≤–∞—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°–µ—Ä–≤–µ—Ä –¥–æ–≤–æ–ª—å–Ω–æ –¥–æ—Ä–æ–≥–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫—Ä—É—Ç–∏—Ç—å—Å—è."\
                               " –í—ã –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–∞—Ç—å –º–µ–º—ã –¥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ, –Ω–æ –ø–æ—Ç–æ–º –±–æ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç—ã–∫–≤—É. –ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å"\
                               " –¥—Ä—É–≥ –¥—Ä—É–≥—É —à–∞–±–ª–æ–Ω—ã –≤ —á–∞—Ç–∞—Ö - –¥–ª—è —ç—Ç–æ–≥–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @memebrandt_bot –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞. "\
                               " –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä—É –¥–Ω–µ–π, –ø–æ–∫–∞ –º—ã –ø–µ—Ä–µ–µ–∑–∂–∞–µ–º –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–π –∏ –¥–µ—à–µ–≤—ã–π —Å–µ—Ä–≤–µ—Ä."\
                               " –ü–æ —Å—Å—ã–ª–æ—á–∫–µ https://bitbucket.org/jattilainen_dev/memerecommend/ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞—à –∫–æ–¥."
    meme_of_the_day_congrats_anon = "–ê –≤–æ—Ç –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π #–º–µ–º–¥–Ω—è! –ó–∞–ø–æ—Å—Ç–∏–≤—à–∏–π –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–æ–º, –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n\nüëÅ {}\nüëç {} \n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ –º–µ–º–æ–≤: {}\n======\n"\
                               "–ù–∞—à–∞ –∫—É—Ä—Å–æ–≤–∞—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°–µ—Ä–≤–µ—Ä –¥–æ–≤–æ–ª—å–Ω–æ –¥–æ—Ä–æ–≥–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫—Ä—É—Ç–∏—Ç—å—Å—è.\n"\
                               " –í—ã –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–∞—Ç—å –º–µ–º—ã –¥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ, –Ω–æ –ø–æ—Ç–æ–º –±–æ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç—ã–∫–≤—É. –ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å"\
                               " –¥—Ä—É–≥ –¥—Ä—É–≥—É —à–∞–±–ª–æ–Ω—ã –≤ —á–∞—Ç–∞—Ö - –¥–ª—è —ç—Ç–æ–≥–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @memebrandt_bot –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞. "\
                               " –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä—É –¥–Ω–µ–π, –ø–æ–∫–∞ –º—ã –ø–µ—Ä–µ–µ–∑–∂–∞–µ–º –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–π –∏ –¥–µ—à–µ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.\n"\
                               " –ü–æ —Å—Å—ã–ª–æ—á–∫–µ https://bitbucket.org/jattilainen_dev/memerecommend/ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞—à –∫–æ–¥."
    change_name_message = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ —Ü–∏—Ñ—Ä, –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–æ—Å–∏–º –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞–∫–æ–Ω–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    wrong_name_character_message = "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ —Ü–∏—Ñ—Ä"
    wrong_name_length_message = "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤"
    name_is_not_unique_message = "–î–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ"
    name_changed_message = '–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å "{}"!'
    changename_hint = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /changename. –¢–∞–∫, –µ—Å–ª–∏ –í–∞—à –º–µ–º –æ–∫–∞–∂–µ—Ç—Å—è –º–µ–º–æ–º –¥–Ω—è, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –í–∞—à–∏–º –Ω–∏–∫–æ–º."
    too_many_uploaded_message = "–î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—à –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ –±–æ–ª–µ–µ {} –º–µ–º–æ–≤ –≤ –¥–µ–Ω—å –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞. –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ–º –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞, –Ω–æ –±—É–¥–µ–º –æ—á–µ–Ω—å –µ–≥–æ –∂–¥–∞—Ç—å —á–µ—Ä–µ–∑ {}! (—Å–º–µ–Ω–∞ –¥–Ω—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ UTC)"
    no_memes_message = "–í—ã –µ—â–µ –Ω–µ –≥—Ä—É–∑–∏–ª–∏ –º–µ–º—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤–æ–∏–º –º–µ–º–∞–º"
    start_memes_ending = "–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–±–∏–∂–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—É–Ω–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ—Å–º–µ—à–Ω–æ–µ –¥–ª—è –í–∞—Å, –æ–Ω–∞ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—Å—è. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –º–µ–º–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"


    def add_arguments(self, parser):
        parser.add_argument('--config', action='store',
                            dest='config_path',
                            help='Set path to recommendation engine configurations')


    def start(self, update, context):
        chat_id = update.message.chat.id
        invite_info = update.message.text.split(' ')

        logger.info("start {}".format(chat_id))

        profile, new_created = Profile.objects.get_or_create(
            telegram_id=chat_id,
        )

        # cant add it to creation, because duplicate created with the same telegram_id
        if new_created:
            profile.start = 0
            profile.save()

        if new_created:
            if len(invite_info) > 1:
                invite_link = invite_info[1]
                if len(invite_link) <= 10 and invite_link.isalnum():
                    invite = Invite.objects.create(
                        link=invite_info[1],
                        user_id = profile.pk,
                    )
                else:
                    logger.warning("hack_attempt {} {}".format(profile.pk, chat_id))
            else:
                invite = Invite.objects.create(
                    link="no_link",
                    user_id = profile.pk,
                )


        button_list = [[
            InlineKeyboardButton(self.start_text, callback_data="reaction 0 -1 -1"),
        ]]
        reply_markup = InlineKeyboardMarkup(button_list)
        if not new_created:
            message = self.intro_message
        else:
            message = self.first_time_message
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text=message,
            reply_markup=reply_markup,
        )
        logger.info("intro_sent {} {} {}".format(profile.pk, chat_id, new_created))

    def help(self, update, context):
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text=self.help_message,
        )

    def stats(self, update, context):
        chat_id = update.message.chat.id
        logger.info("stats_invoked {}".format(chat_id))

        # safety get, better to do it everywhere
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("stats_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return
        user_id = profile.pk

        users_cnt = get_users_count()
        memes_cnt = get_memes_count()
        total_views = get_total_views()
        total_likes = get_total_likes()
        likes_ratio = round(total_likes / total_views * 100, 1)

        user_views = get_user_views(user_id)
        user_likes = get_user_likes(user_id)
        if user_views != 0:
            user_likes_ratio = round(user_likes / user_views * 100, 1)
        else:
            user_likes_ratio = 100

        user_origin = get_user_origin(user_id)
        uploaded_cnt = get_uploaded_count(user_origin)

        info_message = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b> \n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {:,} \n–í—Å–µ–≥–æ –º–µ–º–æ–≤: {:,} \n–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –º–µ–º–æ–≤: {:,} \n–ò–∑ –Ω–∏—Ö –ª–∞–π–∫–æ–≤: {:,} ({} %) \n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> \n–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –º–µ–º–æ–≤: {:,} \n–ò–∑ –Ω–∏—Ö –ª–∞–π–∫–Ω—É–ª–∏: {:,} ({} %) \n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤</b> \n–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ–º–æ–≤: {:,}".format(users_cnt, memes_cnt, total_views, total_likes, likes_ratio, user_views, user_likes, user_likes_ratio, uploaded_cnt)

        if uploaded_cnt > 0:
            uploaded_views = get_uploaded_views(user_origin)
            uploaded_likes = get_uploaded_likes(user_origin)
            if uploaded_views > 0:
                uploaded_likes_ratio = round(uploaded_likes / uploaded_views * 100, 1)
            else:
                uploaded_likes_ratio = 100
            info_message += "\n–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {:,} \n–ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {:,} ({} %)".format(uploaded_views, uploaded_likes, uploaded_likes_ratio)

        best_id, best_likes = get_uploaded_max_liked(user_origin)
        if (best_id != -1):
            info_message += "\n–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ–º: /m{} ({} {})".format(best_id, best_likes, self.good_reaction_emoji)

        info_message += "\n\n @memebrandt_bot"

        context.bot.send_message(
            chat_id=update.message.chat_id,
            text=info_message,
            parse_mode=ParseMode.HTML,
        )
        logger.info("stats_success {} {}".format(user_id, chat_id))

    def schedule_checker(self):
        while True:
            schedule.run_pending()
            sleep(1)

    def send_top_day_meme(self):
        users_info =  get_all_users() # [(pk, tg_id)]
        top_day_meme, total_memes = get_meme_of_the_day()
        if top_day_meme == -1:
            return
        #owner_id = get_id_by_origin(top_day_meme.origin)
        #owner = Profile.objects.get(pk=owner_id)
        #congrat_phrase = self.meme_of_the_day_congrats.format(owner.nickname, top_day_meme.watched, top_day_meme.likes, total_memes)
        #if owner.nickname == '':
        congrat_phrase = self.meme_of_the_day_congrats_anon.format(top_day_meme.watched, top_day_meme.likes, total_memes)
        meme_path = top_day_meme.image.path
        meme_id = top_day_meme.pk
        for i in range(len(users_info)):
            try:
                chat_id = users_info[i][1]
                user_id = users_info[i][0]
                if has_user_seen_meme(user_id, meme_id):
                    self.bot.send_photo(chat_id,
                                        photo=open(meme_path, 'rb'),
                                        caption=congrat_phrase)
                else:
                    button_list = [[
                        InlineKeyboardButton(self.good_reaction_emoji, callback_data="reaction 1 {} {}".format(meme_id, MEME_OF_THE_DAY)),
                        InlineKeyboardButton(self.bad_reaction_emoji, callback_data="reaction -1 {} {}".format(meme_id, MEME_OF_THE_DAY)),
                    ]]
                    reply_markup = InlineKeyboardMarkup(button_list)
                    self.bot.send_photo(chat_id,
                                        photo=open(meme_path, 'rb'),
                                        caption=congrat_phrase,
                                        reply_markup=reply_markup)
            except:
                pass
            sleep(0.1)

    def handle(self, *args, **options):
        if options['config_path']:
            config_path = options['config_path']
        else:
            print("You have to specify a config using --config option")
            exit(0)


        with open(config_path) as config_file:
            config_data = json.load(config_file)
            settings.CONFIG = config_data
        settings.recommend_engine = RecommendEngine(**config_data['RecommendEngine'])
        settings.N_START_MEMES = config_data['N_START_MEMES']
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )

        self.bot = Bot(
            request=request,
            token=settings.TG_TOKEN,
        )

        updater = Updater(
            bot=self.bot,
            use_context=True,
        )

        dispatcher = updater.dispatcher
        dispatcher.add_handler(InlineQueryHandler(self.inline_query, run_async=True))
        dispatcher.add_handler(CommandHandler('start', self.start, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('upload', self.upload, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(MessageHandler(Filters.regex('^(/m[\d]+)$') & Filters.chat_type.private, self.meme, run_async=True))
        dispatcher.add_handler(MessageHandler(Filters.regex('^(/t[\d]+)$') & Filters.chat(username=settings.BOT_ADMINS), self.meme, run_async=True))
        dispatcher.add_handler(CommandHandler('feed', self.feed, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('help', self.help, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('stats', self.stats, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('changename', self.change_name, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('gallery', self.gallery, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('list', self.list, run_async=True, filters=Filters.chat_type.private))
        dispatcher.add_handler(CommandHandler('x', self.moderation, filters=Filters.chat(username=settings.BOT_ADMINS)))

        dispatcher.add_handler(CallbackQueryHandler(self.callback_handler, run_async=True))
        dispatcher.add_handler(MessageHandler(Filters.photo & ~Filters.caption & ~Filters.forwarded & Filters.chat_type.private, self.only_photo_handler, run_async=True))
        dispatcher.add_handler(MessageHandler(Filters.photo & Filters.forwarded & Filters.chat_type.private, self.forwarded_photo_handler))
        dispatcher.add_handler(MessageHandler(Filters.photo & Filters.caption & Filters.chat_type.private, self.photo_with_caption_handler))
        dispatcher.add_handler(MessageHandler((Filters.document | Filters.video | Filters.audio | Filters.voice | Filters.video_note) & Filters.chat_type.private, self.document_handler))
        dispatcher.add_handler(MessageHandler(Filters.text & Filters.chat_type.private, self.text_handler))
        dispatcher.add_error_handler(self.error_handler)
        if config_data['MemeOfTheDay']['send'] == 'yes':
            schedule.every().day.at(config_data['MemeOfTheDay']['at']).do(self.send_top_day_meme)

        if config_data['DailyRecalculation']['do'] == 'yes':
            schedule.every().day.at(config_data['DailyRecalculation']['at']).do(lambda: daily_recalculation(config_data))

        Thread(target=self.schedule_checker).start()

        mode = settings.BOT_MODE
        if mode == "debug":
            updater.start_polling()
        elif mode == "prod":
            PORT = int(os.environ.get("PORT", "8443"))
            HOSTNAME = os.environ.get("CURRENT_HOST")
            updater.start_webhook(listen="0.0.0.0",
                                  port=PORT,
                                  url_path=settings.TG_TOKEN,
                                  key=os.environ.get("SSL_KEY"),
                                  cert=os.environ.get("SSL_CERT"),
                                  webhook_url="https://{}:{}/{}".format(HOSTNAME, PORT, settings.TG_TOKEN)
                                  )
        else:
            logger.error("No MODE specified!")
            sys.exit(1)

    @staticmethod
    def send_message(context, chat_id, message, reply_markup=None, parse_mode=None):
        if reply_markup:
            context.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
            )
            return
        context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=parse_mode,
        )

    def callback_handler(self, update, context):
        # Get reply
        query = update.callback_query

        # Get chat
        chat_id = query.message.chat.id
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("callback_handler_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return

        # Parse reply
        command_type = (query.data.split(' '))[0]
        if command_type == "moderation":
            user = query.from_user
            username = user['username']
            if username not in settings.BOT_ADMINS:
                self.send_message(context, chat_id, self.permission_denied_message)
                return

            _, choice, meme_id = (query.data.split(' '))
            try:
                query.edit_message_reply_markup(reply_markup=None)
            except BadRequest:
                return
            meme = Meme.objects.get(pk=meme_id)
            if meme.checked == ON_REVIEW:
                if choice == "1":
                    self.send_message(context, chat_id, self.good_moderation_emoji)
                    approved_processing(meme_id)
                    set_moderation_result(meme_id, True)
                elif choice == "-1":
                    self.send_message(context, chat_id, self.bad_moderation_emoji)
                    set_moderation_result(meme_id, False)
                    if (is_meme_from_user(meme.origin)):
                        user_id = get_id_by_origin(meme.origin)
                        author = Profile.objects.get(pk=user_id)
                        author.rejected = F('rejected') + 1
                        author.save(update_fields=['rejected'])
                        caption = "–í–∞—à –º–µ–º /m" + str(meme_id) + " –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –≤ –Ω–µ–º –µ—Å—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–º, –∞ –ø—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @memebrandt_support"
                        context.bot.send_photo(chat_id=author.telegram_id, photo=open(meme.image.path, 'rb'), caption=caption)
            else:
                self.send_message(context, chat_id, "–ù–µ —É—Å–ø–µ–ª")

            # For moderation convinience
            on_review_count = get_on_review_count()
            self.send_message(context, chat_id, "–ú–µ–º–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {}".format(on_review_count))

            meme_id = get_oldest_on_review()
            if meme_id == -1:
                self.send_message(context, chat_id, self.no_memes_for_review_message)
                return

            meme_path = Meme.objects.get(pk=meme_id).image.path  # Get path to meme
            button_list = [[
                InlineKeyboardButton(self.good_moderation_emoji, callback_data="moderation 1 {}".format(meme_id)),
                InlineKeyboardButton(self.bad_moderation_emoji, callback_data="moderation -1 {}".format(meme_id)),
            ]]
            reply_markup = InlineKeyboardMarkup(button_list)

            context.bot.send_photo(chat_id=chat_id,
                                   photo=open(meme_path, 'rb'),
                                   reply_markup=reply_markup)
            logger.info("moderation {}".format(meme_id))

        elif command_type == "reaction":
            start = time.time()

            _, choice, meme_id, recommend_details = (query.data.split(' '))
            logger.info("reaction {} {} {} {} {}".format(profile.pk, query.from_user.id, choice, meme_id, recommend_details))
            meme_id = int(meme_id)
            recommend_details = int(recommend_details)
            message_id = query.message.message_id
            try:
                query.edit_message_reply_markup(reply_markup=None)
            except BadRequest:
                return

            reaction = None
            if choice == "1":
                reaction = 'like'
                submit_reaction(profile.pk, meme_id, 'like', recommend_details)
            elif choice == "-1":
                reaction = 'dislike'
                submit_reaction(profile.pk, meme_id, 'dislike', recommend_details)
                try:
                    context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                except:
                    pass
            old_meme_id = meme_id
            old_recommend_details = recommend_details
            meme_id, recommend_details, new_start = get_next_meme(profile.pk, start=profile.start)   # Get meme id from recommendation system
            if (profile.start != new_start):
                if profile.start != settings.N_START_MEMES + 1 and new_start == settings.N_START_MEMES + 1:
                    self.send_message(context, chat_id, self.start_memes_ending)
                profile.start = new_start
                profile.save()
            if (meme_id == -1):
                button_list = [[
                    InlineKeyboardButton(self.imback_text, callback_data="reaction 0 -1 -1"),
                ]]
                reply_markup = InlineKeyboardMarkup(button_list)
                self.send_message(context, query.message.chat.id, self.no_memes_left_message, reply_markup)
            else:
                meme_path = Meme.objects.get(pk=meme_id).image.path  # Get path to meme
                button_list = [[
                    InlineKeyboardButton(self.good_reaction_emoji, callback_data="reaction 1 {} {}".format(meme_id, recommend_details)),
                    InlineKeyboardButton(self.bad_reaction_emoji, callback_data="reaction -1 {} {}".format(meme_id, recommend_details)),
                ]]
                reply_markup = InlineKeyboardMarkup(button_list)
                try:
                    context.bot.send_photo(query.message.chat.id,
                                           photo=open(meme_path, 'rb'),
                                           reply_markup=reply_markup)
                except Unauthorized:
                    logger.warning("reaction after block {}".format(profile.pk))
            logger.info("recommend {} {} {} {}".format(profile.pk, query.from_user.id, meme_id, recommend_details))

            if reaction is None:
                return

            end = time.time()
            response_time = int(1000 * (end - start))
            LogReaction.objects.create(
                user_id=profile.pk,
                meme_id=old_meme_id,
                score=reaction_to_rating(reaction),
                response_time=response_time,
                reacted_recommend_detail=old_recommend_details,
                responded_recommend_detail=recommend_details
            )
        elif command_type == "gallery":
            _, user_id, new_page, last_page = (query.data.split(' '))
            new_page = int(new_page)
            last_page = int(last_page)
            try:
                query.edit_message_reply_markup(reply_markup=None)
            except BadRequest:
                return
            caption, image_path, reply_markup = self.get_gallery_page(user_id, new_page, chat_id)
            message_id = query.message.message_id
            context.bot.delete_message(chat_id=chat_id, message_id=message_id)

            if not image_path is None:
                context.bot.send_photo(chat_id,
                                       photo=open(image_path, 'rb'),
                                       caption=caption,
                                       reply_markup=reply_markup)
            else:
                self.send_message(context, chat_id, caption, reply_markup)
            logger.info("gallery_updated {} {} {}".format(chat_id, user_id, new_page))
        elif command_type == "list":
            _, user_id, new_page, last_page = (query.data.split(' '))
            new_page = int(new_page)
            last_page = int(last_page)
            try:
                query.edit_message_reply_markup(reply_markup=None)
            except BadRequest:
                return
            caption, reply_markup = self.get_list_page(user_id, new_page)
            message_id = query.message.message_id
            context.bot.delete_message(chat_id=chat_id, message_id=message_id)

            self.send_message(context, chat_id, caption, reply_markup)
            logger.info("list_updated {} {} {}".format(chat_id, user_id, new_page))



    def only_photo_handler(self, update, context):
        chat_id = update.message.chat.id

        # safety get, better to do it everywhere
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("photo_handler_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return

        logger.info("photo_handler_uploading {}".format(chat_id))

        if profile.rejected > settings.CONFIG['MAX_REJECTED']:
            self.send_message(context, chat_id, self.too_many_rejected_message)
            return

        if get_origin_on_review_count(get_user_origin(profile.pk)) > settings.CONFIG['MAX_ONREVIEW']:
            self.send_message(context, chat_id, self.too_many_onreview_message)
            return

        n_uploads, time_left, time_left_type = get_n_uploads_a_day(get_user_origin(profile.pk))
        if n_uploads >= settings.CONFIG['MAX_UPLOADS_A_DAY']:
            time_left_words = get_right_time_word(time_left, time_left_type)
            self.send_message(context, chat_id, self.too_many_uploaded_message.format(settings.CONFIG['MAX_UPLOADS_A_DAY'], time_left_words))
            return

        file_id = update.message.photo[-1].file_id
        newFile = context.bot.get_file(file_id)
        # jpg - telegram native format
        temp_meme_filename = os.path.join(settings.TEMP_PATH, uuid.uuid4().hex + ".jpg")
        newFile.download(temp_meme_filename)
        meme_id = process_new_meme(temp_meme_filename, origin=get_user_origin(profile.pk))
        os.remove(temp_meme_filename)

        if meme_id == settings.TOO_WIDE_ERROR:
            self.send_message(context, chat_id, self.wide_image_message)
            return
        elif meme_id == settings.TOO_HIGH_ERROR:
            self.send_message(context, chat_id, self.high_image_message)
            return
        elif meme_id == settings.TOO_LARGE_ERROR:
            self.send_message(context, chat_id, self.large_image_message)
            return
        elif meme_id == settings.UNKNOWN_UPLOAD_ERROR:
            self.send_message(context, chat_id, self.unknown_error_message)
            return
        elif meme_id < 0:
            self.send_message(context, chat_id, self.origin_meme_repeated_message.format(-meme_id))
            return

        button_list = [[
            InlineKeyboardButton(self.continue_text, callback_data="reaction 0 -1 -1"),
        ]]
        reply_markup = InlineKeyboardMarkup(button_list)
        message = self.successful_upload_message.format(meme_id)
        if profile.nickname == "":
            message += "\n\n" + self.changename_hint
        self.send_message(context, update.message.chat_id, message, reply_markup)
        logger.info("photo_handler_uploaded {} {} {}".format(profile.pk, chat_id, meme_id))
        total_on_review = get_on_review_count()
        if (math.log10(total_on_review)/ math.log10(4)) % 1 == 0:
            context.bot.send_message(chat_id=settings.DEVELOPER_CHAT_ID, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–µ–ø–µ–Ω—å—é —á–∏—Å–ª–∞ 4. ({})".format(total_on_review), parse_mode=ParseMode.HTML)

    def forwarded_photo_handler(self, update, context):
        chat_id = update.message.chat.id
        logger.info("forwarded_photo_handler {}".format(chat_id))
        self.send_message(context, chat_id, self.forwarded_photo_message)

    def photo_with_caption_handler(self, update, context):
        chat_id = update.message.chat.id
        logger.info("photo_with_caption_handler {}".format(chat_id))
        user = update.message.from_user
        if (user['username'] in settings.BOT_ADMINS):
            # here we choose the largest image to show to users
            photo_id = update.message.photo[0].file_id
            caption = update.message.caption
            template = Template.objects.create(
                telegram_id=photo_id,
                text=caption,
            )

            # here we choose the smallest image to reduce memory cost
            file_id = update.message.photo[-1].file_id
            newFile = context.bot.get_file(file_id)
            # we have to use TEMP directory, instead of saving directly to TEMPLATE folder, because template.save creates copy
            temp_meme_filename = os.path.join(settings.TEMP_PATH, uuid.uuid4().hex + ".jpg")
            newFile.download(temp_meme_filename)
            template.image.save(temp_meme_filename, File(open(temp_meme_filename, "rb")))
            template.save()
            self.send_message(context, chat_id, "–®–∞–±–ª–æ–Ω {} –∑–∞–≥—Ä—É–∂–µ–Ω".format(template.pk))
        else:
            self.send_message(context, chat_id, self.photo_with_caption_message)


    def document_handler(self, update, context):
        chat_id = update.message.chat.id
        logger.info("document_handler {}".format(chat_id))
        self.send_message(context, chat_id, self.document_message)


    def upload(self, update, context):
        chat_id = update.message.chat.id

        logger.info("upload_invoked {}".format(chat_id))

        context.bot.send_message(
            chat_id=update.message.chat_id,
            text=self.upload_message,
        )


    def get_meme_description(self, meme, chat_id):
        is_author = False
        if is_meme_from_user(meme.origin):
            user_id = get_id_by_origin(meme.origin)
            try:
                profile = Profile.objects.get(pk=user_id)
            except Profile.DoesNotExist:
                profile = None
            if profile is None:
                logger.warning("photo_handler_user_doesnt_exist {}".format(chat_id))
            else:
                if profile.telegram_id == chat_id:
                    is_author = True
        meme_path = meme.image.path
        caption = ""
        show_meme = True
        time_ago = (timezone.now() - meme.published_on.replace())
        if meme.checked == APPROVED:
            caption = self.approved_message.format(get_time_ago_words(time_ago), meme.watched, meme.likes)
        if meme.checked == REJECTED:
            if is_author:
                caption = self.rejected_author_message
            else:
                show_meme = False
                caption = self.rejected_other_message
        if meme.checked == ON_REVIEW:
            if is_author:
                caption = self.on_review_author_message
            else:
                show_meme = False
                caption = self.on_review_other_message
        if show_meme:
            return caption, meme_path
        else:
            return caption, None
            self.send_message(context, chat_id, caption)


    def meme(self, update, context):
        chat_id = update.message.chat.id
        logger.info("meme_invoked {}".format(chat_id))
        if not isinstance(update.message.text, str):
            return

        args = update.message.text.split('m')
        is_t = False
        if len(args) != 2:
            is_t = True
            args = update.message.text.split('t')
            if len(args) != 2:
                return

        meme_str = args[1]
        try:
            meme_id = int(meme_str)
        except:
            return

        try:
            meme = Meme.objects.get(pk=meme_id)
        except Meme.DoesNotExist:
            self.send_message(context, chat_id, self.meme_does_not_exist_message)
            return

        caption, image_path = self.get_meme_description(meme, chat_id)
        if not image_path is None:
            if is_t:
                caption = meme.text
            context.bot.send_photo(chat_id,
                                   photo=open(image_path, 'rb'),
                                   caption=caption)
        else:
            self.send_message(context, chat_id, caption)

        logger.info("meme_completed {} {}".format(chat_id, meme_id))


    def get_scroll_button_pages(self, cur_page, total_pages):
        prev_page = cur_page
        if cur_page - 1 >= 0:
            prev_page = cur_page - 1

        next_page = cur_page
        if cur_page + 1 < total_pages:
            next_page = cur_page + 1

        return prev_page, next_page


    def get_gallery_page(self, user_id, page, chat_id):
        uploaded_count = get_uploaded_count(get_user_origin(user_id))
        if (uploaded_count == 0):
            return self.no_memes_message, None, None
        cur_page = page
        prev_page, next_page = self.get_scroll_button_pages(cur_page, uploaded_count)
        meme = get_origin_nth_meme(get_user_origin(user_id), cur_page)

        caption, image_path = self.get_meme_description(meme, chat_id)
        button_list = [[
             InlineKeyboardButton(self.previous_page_emoji, callback_data="gallery {} {} {}".format(user_id, prev_page, cur_page)),
             InlineKeyboardButton("{}/{}".format(cur_page + 1, uploaded_count), callback_data="gallery {} {} {}".format(user_id, cur_page, cur_page)),
            InlineKeyboardButton(self.next_page_emoji, callback_data="gallery {} {} {}".format(user_id, next_page, cur_page)),
        ]]
        reply_markup = InlineKeyboardMarkup(button_list)
        return caption, image_path, reply_markup


    def gallery(self, update, context):
        chat_id = update.message.chat.id
        logger.info("gallery_invoked {}".format(chat_id))

        # safety get, better to do it everywhere
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("gallery_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return
        user_id = profile.pk

        caption, image_path, reply_markup = self.get_gallery_page(user_id, 0, chat_id)
        if not image_path is None:
            context.bot.send_photo(chat_id,
                                   photo=open(image_path, 'rb'),
                                   caption=caption,
                                   reply_markup=reply_markup)
        else:
            self.send_message(context, chat_id, caption, reply_markup)

        logger.info("gallery_sent {} {}".format(chat_id, user_id))


    def get_list_page(self, user_id, page):
        uploaded_count = get_uploaded_count(get_user_origin(user_id))
        if (uploaded_count == 0):
            return self.no_memes_message, None
        cur_page = page
        total_pages = (uploaded_count + settings.CONFIG["N_MEMES_ON_LIST_PAGE"] - 1) // settings.CONFIG["N_MEMES_ON_LIST_PAGE"]
        prev_page, next_page = self.get_scroll_button_pages(cur_page, total_pages)
        start = cur_page * settings.CONFIG["N_MEMES_ON_LIST_PAGE"]
        end = min((cur_page + 1) * settings.CONFIG["N_MEMES_ON_LIST_PAGE"], uploaded_count)
        memes_ids, likes, views, status = get_origin_range_memes_stats(get_user_origin(user_id), start, end)
        caption = ""
        for i in range(len(memes_ids)):
            like_ratio = 0
            if views[i] != 0:
                like_ratio = int(likes[i] / views[i] * 100)
            if (status[i] == APPROVED):
                caption += "/m{}  {} {} | {} {}\n".format(memes_ids[i], self.good_reaction_emoji, likes[i], self.views_emoji, views[i])
            elif (status[i] == REJECTED):
                caption += "/m{}  {}\n".format(memes_ids[i], self.bad_moderation_emoji)
            elif (status[i] == ON_REVIEW):
                caption += "/m{}  {}\n".format(memes_ids[i], self.on_review_emoji)

        button_list = [[
             InlineKeyboardButton(self.previous_page_emoji, callback_data="list {} {} {}".format(user_id, prev_page, cur_page)),
             InlineKeyboardButton("{}-{}/{}".format(start + 1, end, uploaded_count), callback_data="list {} {} {}".format(user_id, cur_page, cur_page)),
            InlineKeyboardButton(self.next_page_emoji, callback_data="list {} {} {}".format(user_id, next_page, cur_page)),
        ]]
        reply_markup = InlineKeyboardMarkup(button_list)
        return caption, reply_markup


    def list(self, update, context):
        chat_id = update.message.chat.id
        logger.info("list_invoked {}".format(chat_id))

        # safety get, better to do it everywhere
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("list_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return
        user_id = profile.pk

        caption, reply_markup = self.get_list_page(user_id, 0)
        self.send_message(context, chat_id, caption, reply_markup=reply_markup)

        logger.info("list_sent {} {}".format(chat_id, user_id))

    def moderation(self, update, context):
        user = update.message.from_user
        username = user['username']
        if username not in settings.BOT_ADMINS:
            self.send_message(context, update.message.chat_id, self.permission_denied_message)
            return

        meme_id = get_oldest_on_review()
        if meme_id == -1:
            self.send_message(context, update.message.chat_id, self.no_memes_for_review_message)
            return

        meme_path = Meme.objects.get(pk=meme_id).image.path  # Get path to meme
        button_list = [[
            InlineKeyboardButton(self.good_moderation_emoji, callback_data="moderation 1 {}".format(meme_id)),
            InlineKeyboardButton(self.bad_moderation_emoji, callback_data="moderation -1 {}".format(meme_id)),
        ]]
        reply_markup = InlineKeyboardMarkup(button_list)

        context.bot.send_photo(update.message.chat_id,
                               photo=open(meme_path, 'rb'),
                               reply_markup=reply_markup)
        logger.info("moderation {}".format(meme_id))


    # ctrl+c - ctrl+v quick solution - to refactor
    def feed(self, update, context):
        chat_id = update.message.chat.id
        try:
            profile = Profile.objects.get(telegram_id=chat_id)
        except Profile.DoesNotExist:
            profile = None
        if profile is None:
            logger.warning("feed_user_doesnt_exist {}".format(chat_id))
            self.send_message(context, chat_id, self.unknown_error_message)
            return

        meme_id, recommend_details, new_start = get_next_meme(profile.pk, start=profile.start)   # Get meme id from recommendation system
        if profile.start != new_start:
            profile.start = new_start
            profile.save()
        if meme_id == -1:
            button_list = [[
                InlineKeyboardButton(self.imback_text, callback_data="reaction 0 -1 -1"),
            ]]
            reply_markup = InlineKeyboardMarkup(button_list)
            self.send_message(context, chat_id, self.no_memes_left_message, reply_markup)
            return
        meme_path = Meme.objects.get(pk=meme_id).image.path  # Get path to meme
        button_list = [[
            InlineKeyboardButton(self.good_reaction_emoji, callback_data="reaction 1 {} {}".format(meme_id, recommend_details)),
            InlineKeyboardButton(self.bad_reaction_emoji, callback_data="reaction -1 {} {}".format(meme_id, recommend_details)),
            ]]
        reply_markup = InlineKeyboardMarkup(button_list)

        context.bot.send_photo(chat_id,
                               photo=open(meme_path, 'rb'),
                               reply_markup=reply_markup)
        logger.info("recommend {} {} {} {}".format(profile.pk, chat_id, meme_id, recommend_details))


    def error_handler(self, update, context) -> None:
        """Log the error and send a telegram message to notify the developer."""
        # Log the error before we do anything else, so we can see it even if something breaks.-
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

        # traceback.format_exception returns the usual python message about an exception, but as a
        # list of strings rather than a single string, so we have to join them together.
        tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
        tb_string = ''.join(tb_list)

        # Build the message with some markup and additional information about what happened.
        # You might need to add some logic to deal with messages longer than the 4096 character limit.
        message = (
            f'An exception was raised while handling an update\n'
            f'<pre>update = {html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False))}'
            '</pre>\n\n'
            f'<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n'
            f'<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n'
            f'<pre>{html.escape(tb_string)}</pre>'
        )

        # Finally, send the message
        context.bot.send_message(chat_id=settings.DEVELOPER_CHAT_ID, text=message, parse_mode=ParseMode.HTML)


    def change_name(self, update, context):
        chat_id = update.message.chat.id
        context.chat_data['last_command'] = 'change_name'
        self.send_message(context, chat_id, self.change_name_message)

        logger.info("change_name_invoked {}".format(chat_id))


    def text_handler(self, update, context):
        text = update.effective_message.text
        chat_id = update.message.chat.id
        if 'last_command' in context.chat_data and context.chat_data['last_command'] == 'change_name':
            if not re.match("^[A-Za-z0-9_]*$", text):
                self.send_message(context, chat_id, self.wrong_name_character_message)
                return
            if len(text) < 5 or len(text) > 20:
                self.send_message(context, chat_id, self.wrong_name_length_message)
                return

            try:
                profile = Profile.objects.get(telegram_id=chat_id)
            except Profile.DoesNotExist:
                profile = None
            if profile is None:
                logger.warning("name_change_user_doesnt_exist {}".format(chat_id))
                self.send_message(context, chat_id, self.unknown_error_message)
                return

            if not does_nickname_exist(text):
                profile.nickname = text
                profile.save()
            else:
                self.send_message(context, chat_id, self.name_is_not_unique_message)
                return
            self.send_message(context, chat_id, self.name_changed_message.format(text))
            context.chat_data['last_command'] = 'name_changed'
            logger.info("change_name_success {} {} {}".format(profile.pk, chat_id, text))
            return

        context.chat_data['last_command'] = 'unknown_text'

    def inline_query(self, update, context):
        start = time.time()
        query = update.inline_query.query
        def substr_match(str1, str2):
            str1 = str1.lower()
            str2 = str2.lower()
            if len(str1) >= len(str2):
                return Levenshtein.distance(str1, str2)
            else:
                best_match = len(str1)
                for i in range(0, len(str2) - len(str1) + 1):
                    best_match = min(best_match, Levenshtein.distance(str1, str2[i:i+len(str1)]))
                return best_match
        templates = np.array(Template.objects.all())
        text_matches = []
        for template in templates:
            text_matches.append(substr_match(query, template.text))
        sorted_templates = templates[np.argsort(text_matches)]
        result = []
        for i in range(min(50, len(sorted_templates))):
            result.append(InlineQueryResultCachedPhoto(id=uuid.uuid4(), photo_file_id=sorted_templates[i].telegram_id))
        logger.info("inline_query_result")
        update.inline_query.answer(results=result, switch_pm_text='More memes for you',
                               switch_pm_parameter='inline-help', cache_time=0)
        end = time.time()
        response_time = int(1000 * (end - start))
        if len(query) >= 3:
            user_id = update.inline_query.from_user.id
            template_id = sorted_templates[0].pk
            LogInline.objects.create(
                user_id=user_id,
                template_id=template_id,
                response_time=response_time,
            )


